<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2022-02-09" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2022-04-02" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2022-04-02" />
<meta name="version" content="1" />
<meta name="categories" content="Programming > Deno > Rest Server" />
<meta name="tags" content="programming, technologies, Deno, scripting, host, JavaScript, TypeScript, REST, server" />
<meta name="description" content="A simple REST server based on Deno and Oak." />

<link rel="stylesheet" href="/inc/page.css" />
 
<title>Technologies - Deno - REST Server</title>

</head><body><header id="page-header"></header><div id="main-toolbar"></div><main id="page-content">

<h1>REST Server</h1>

<p id="page-abstract"></p>

<h2 cbc>The Skeleton Code</h2><div>

<p>https://blog.codecentric.de/2020/10/deno-einfuehrung-entwicklung-einer-einfachen-rest-api/</p>

<p>We will use Oak's <tt>Router</tt> object to define routes:</p>

<figcaption class="listing">Definining the routes</figcaption>
<pre>
import { Application, Router } from "https://deno.land/x/oak/mod.ts";

const app = new Application( );
const router = new Router( );
router.get( "/", ( ctx ) => {
	ctx.response.body = "Root GET" ;
	} )
.post( "/", ( ctx ) => {
	ctx.response.body = "Root POST" ;
	} ) 
.put("/", ( ctx ) => {
	ctx.response.body = "Root PUT" ;
	} ) 
.delete( "/", ( ctx ) => {
	ctx.response.body = "Root DELETE" ;
	} ) ;

app.use( router.allowedMethods( ));
app.use( router.routes( ));

app.addEventListener( "listen", ( ) => {
	console.log( "Listening on port 8000..." ) ;
	} ) ;

await app.listen( { 8000 } ) ;
</pre>

<p>Test with  <a href="/tools/curl.htm"><tt>curl</tt></a>:</p>

<figcaption class="listing">Skeleton app test</figcaption>
<pre>
usp@sy-eb8570>curl http://localhost:8000
Root GET
usp@sy-eb8570>curl -X POST http://localhost:8000
Root POST
usp@sy-eb8570>curl -X DELETE http://localhost:8000
Root DELETE
</pre>

<p>Let's add some routes and data:</p>

<figcaption class="listing">Skeleton app test</figcaption>
<pre>
import { Application, Router } from "https://deno.land/x/oak/mod.ts";

const port = 8000;

const customers = {
	"1" : { name : "Alfreds Futterkiste" , address : "Obere Str. 57, Berlin, 12209, Germany"  } ,
	"2" : { name : "Ana Trujillo Emparedados y helados" , address : "Avda. de la Constitución 2222, México D.F., 05021, Mexico"  } ,
	"3" : { name : "Berglunds snabbköp" , address : "Berguvsvägen  8, Luleå, S-95822, Sweden"  } ,
	"4" : { name : "Du monde entier" , address : "67 rue des Cinquante Otages, Nantes, 44000, France"  }
	} ;

const app = new Application( );

const router = new Router( );

router.get( "/", ( ctx ) => {
	ctx.response.body = "Root GET" ;
	} ) 
.get( "/customer", ( ctx ) => {
	ctx.response.body = "Get all customers" ;
	} )
.post( "/customer", ( ctx ) => {
	ctx.response.body = `Create a new customer` ;
	} ) 
.get( "/customer/:id", ( ctx ) => {
	ctx.response.body = `Get customer ${ctx.params.id}` ;
	} )
.put( "/customer/:id", ( ctx ) => {
	ctx.response.body = `Update customer ${ctx.params.id}` ;
	} ) 
.delete( "/customer/:id", ( ctx ) => {
	ctx.response.body = `Delete customer ${ctx.params.id}` ;
	} ) ;

app.use( router.allowedMethods( ));
app.use( router.routes( ));

app.addEventListener( "listen", ( ) => {
	console.log( `Listening on: localhost:${port}` ) ;
	} ) ;

await app.listen( { port } ) ;

</pre>



<!-- h2 --></div>

<h2 cbc>Testing</h2><div>

<p>Testing can be done with cURL. According to <a href="https://devblogs.microsoft.com/commandline/tar-and-curl-come-to-windows/">Rich Turner</a> and the <a href="https://techcommunity.microsoft.com/t5/containers/tar-and-curl-come-to-windows/ba-p/382409">Virtualization Team</a>, curl and  bsdtar have been ported to Windows and are available from version 10 build 1763. They can be found in the <tt>c:\windows\system32\</tt> folder. Git for Windows brings its own version for mingw in the <tt>...\git\mingw64\bin\</tt> folder and seems to have some more options, as the --version argument reveals.</p>

<figcaption class="listing">Skeleton app test</figcaption>
<pre>
usp@sy-eb8570>curl http://localhost:8000
Root GET
usp@sy-eb8570>curl -X POST http://localhost:8000
Root POST
usp@sy-eb8570>curl -X DELETE http://localhost:8000
Root DELETE
</pre>

<pre>>curl -X PUT -H "Content-Type:application/json" http://localhost:8000/customer/4 -d '{"name":"test","address":"strasse"}'</pre>

<!-- h2 --></div>



</main><footer id="page-footer"></footer><script type="module" src="/inc/page.js" ></script></body></html>